{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs ss # ROS2 ## urdf and launch ## build ```bash # build all workspace packages colcon build # build signal package excluding dependencies colcon build --package-select my_rotate_bot # colcon build --symlink-install if you do colcon build --symlink-install, then instead of a copy of the launch file it will put a symbolic link to the launchfile. This means that if you change something to the launch file in your package you don't have to rebuild the package for the changes to take effect. This is only true for files that don require compilation, so --symlink-install will work for config files or python code / launch files etc. run ros2 launch my_rotate_bot robot_state_publisher.launch.py tf ros2 topic list # /joint_states /parameter_events /robot_description /rosout /tf /tf_static joint_state_publisher install from apt-get or package package.xml sudo apt install ros-foxy-joint-state-publisher or add to package.xml and run rosdep <exec_depend>joint_state_publisher</exec_depend> rosdep install -i --from-path src --rosdistro foxy -y run ros2 run joint_state_publisher joint_state_publisher ./src/my_rotate_bot/urdf/model.urdf robot_state_publisher vs joint_state_publisher Wiki git submodule add https://github.com/robobe/ros2_tutorial.wiki.git wiki git commit -m \"Adding wiki\" git push ```","title":"Home"},{"location":"#welcome-to-mkdocs","text":"ss # ROS2 ## urdf and launch ## build ```bash # build all workspace packages colcon build # build signal package excluding dependencies colcon build --package-select my_rotate_bot # colcon build --symlink-install if you do colcon build --symlink-install, then instead of a copy of the launch file it will put a symbolic link to the launchfile. This means that if you change something to the launch file in your package you don't have to rebuild the package for the changes to take effect. This is only true for files that don require compilation, so --symlink-install will work for config files or python code / launch files etc.","title":"Welcome to MkDocs"},{"location":"#run","text":"ros2 launch my_rotate_bot robot_state_publisher.launch.py","title":"run"},{"location":"#tf","text":"ros2 topic list # /joint_states /parameter_events /robot_description /rosout /tf /tf_static","title":"tf"},{"location":"#joint_state_publisher","text":"install from apt-get or package package.xml sudo apt install ros-foxy-joint-state-publisher or add to package.xml and run rosdep <exec_depend>joint_state_publisher</exec_depend> rosdep install -i --from-path src --rosdistro foxy -y","title":"joint_state_publisher"},{"location":"#run_1","text":"ros2 run joint_state_publisher joint_state_publisher ./src/my_rotate_bot/urdf/model.urdf","title":"run"},{"location":"#robot_state_publisher-vs-joint_state_publisher","text":"","title":"robot_state_publisher vs joint_state_publisher"},{"location":"#wiki","text":"git submodule add https://github.com/robobe/ros2_tutorial.wiki.git wiki git commit -m \"Adding wiki\" git push ```","title":"Wiki"},{"location":"gazebo/launch-gazebo/","text":"launch Gazebo","title":"Spwan robot"},{"location":"gazebo/launch-gazebo/#launch-gazebo","text":"","title":"launch Gazebo"},{"location":"gazebo/resource/","text":"Industrial Training - mulecar_simulation","title":"Resource"},{"location":"gazebo/plugins/hello_model_plugin/","text":"Model plugin Create basic plugins and project structure Project structure \u251c\u2500\u2500 bin \u2502 \u2514\u2500\u2500 libptz_plugin.so \u251c\u2500\u2500 build \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 plugins \u2502 \u251c\u2500\u2500 camera_ptz \u2502 \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u2502 \u2514\u2500\u2500 ptz_plugin.cpp \u2502 \u2514\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 README.md \u2514\u2500\u2500 worlds \u2514\u2500\u2500 plug_teste.world CMakefiles hierarchy root plugins for each plugin sub directory root cmake_minimum_required ( VERSION 3 .0 ) project ( gz ) # Find Gazebo find_package ( gazebo REQUIRED ) include_directories ( ${ GAZEBO_INCLUDE_DIRS } ) link_directories ( ${ GAZEBO_LIBRARY_DIRS } ) set ( CMAKE_CXX_FLAGS \" ${ CMAKE_CXX_FLAGS } ${ GAZEBO_CXX_FLAGS } \" ) add_subdirectory ( plugins ) plugins This cmake file call other plugin cmake files add_subdirectory ( camera_ptz ) plugin add_library ( ptz_plugin SHARED ptz_plugin.cpp ) target_link_libraries ( ptz_plugin ${ GAZEBO_LIBRARIES } ) install ( TARGETS ptz_plugin DESTINATION ${ PROJECT_SOURCE_DIR } /bin ) Plugin code print log message to Console using gzdbg gzmsg gzwarn gzerr when running gazebo in verbose mode #include <functional> #include <gazebo/gazebo.hh> #include <gazebo/physics/physics.hh> #include <gazebo/common/common.hh> #include <ignition/math/Vector3.hh> namespace gazebo { class Ptz : public ModelPlugin { public : void Load ( physics :: ModelPtr _parent , sdf :: ElementPtr /*_sdf*/ ) { // Store the pointer to the model this -> model = _parent ; gzdbg << \"hello debug msg\" << std :: endl ; gzmsg << \"hello info msg\" << std :: endl ; gzwarn << \"hello warning msg\" << std :: endl ; gzerr << \"hello error msg\" << std :: endl ; // Listen to the update event. This event is broadcast every // simulation iteration. this -> updateConnection = event :: Events :: ConnectWorldUpdateBegin ( std :: bind ( & Ptz :: OnUpdate , this )); } // Called by the world update start event public : void OnUpdate () { } // Pointer to the model private : physics :: ModelPtr model ; // Pointer to the update event connection private : event :: ConnectionPtr updateConnection ; }; // Register this plugin with the simulator GZ_REGISTER_MODEL_PLUGIN ( Ptz ) } world example <?xml version=\"1.0\"?> <sdf version= \"1.4\" > <world name= \"default\" > <!-- Ground Plane --> <include> <uri> model://ground_plane </uri> </include> <include> <uri> model://sun </uri> </include> <model name= \"box\" > <pose> 0 0 0.5 0 0 0 </pose> <link name= \"link\" > <collision name= \"collision\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </visual> </link> <plugin name= \"model_push\" filename= \"libptz_plugin.so\" /> </model> </world> </sdf> usage # dont forget add plugin `so` to GAZEBO_PLUGIN_PATH gazebo --verbose world/plug_test.world # Or use -s to load plugin gazebo --verbose -s bin/libptz_plugin.so worlds/plug_teste.world","title":"Hello model"},{"location":"gazebo/plugins/hello_model_plugin/#model-plugin","text":"Create basic plugins and project structure","title":"Model plugin"},{"location":"gazebo/plugins/hello_model_plugin/#project-structure","text":"\u251c\u2500\u2500 bin \u2502 \u2514\u2500\u2500 libptz_plugin.so \u251c\u2500\u2500 build \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 plugins \u2502 \u251c\u2500\u2500 camera_ptz \u2502 \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u2502 \u2514\u2500\u2500 ptz_plugin.cpp \u2502 \u2514\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 README.md \u2514\u2500\u2500 worlds \u2514\u2500\u2500 plug_teste.world","title":"Project structure"},{"location":"gazebo/plugins/hello_model_plugin/#cmakefiles-hierarchy","text":"root plugins for each plugin sub directory","title":"CMakefiles hierarchy"},{"location":"gazebo/plugins/hello_model_plugin/#root","text":"cmake_minimum_required ( VERSION 3 .0 ) project ( gz ) # Find Gazebo find_package ( gazebo REQUIRED ) include_directories ( ${ GAZEBO_INCLUDE_DIRS } ) link_directories ( ${ GAZEBO_LIBRARY_DIRS } ) set ( CMAKE_CXX_FLAGS \" ${ CMAKE_CXX_FLAGS } ${ GAZEBO_CXX_FLAGS } \" ) add_subdirectory ( plugins )","title":"root"},{"location":"gazebo/plugins/hello_model_plugin/#plugins","text":"This cmake file call other plugin cmake files add_subdirectory ( camera_ptz )","title":"plugins"},{"location":"gazebo/plugins/hello_model_plugin/#plugin","text":"add_library ( ptz_plugin SHARED ptz_plugin.cpp ) target_link_libraries ( ptz_plugin ${ GAZEBO_LIBRARIES } ) install ( TARGETS ptz_plugin DESTINATION ${ PROJECT_SOURCE_DIR } /bin )","title":"plugin"},{"location":"gazebo/plugins/hello_model_plugin/#plugin-code","text":"print log message to Console using gzdbg gzmsg gzwarn gzerr when running gazebo in verbose mode #include <functional> #include <gazebo/gazebo.hh> #include <gazebo/physics/physics.hh> #include <gazebo/common/common.hh> #include <ignition/math/Vector3.hh> namespace gazebo { class Ptz : public ModelPlugin { public : void Load ( physics :: ModelPtr _parent , sdf :: ElementPtr /*_sdf*/ ) { // Store the pointer to the model this -> model = _parent ; gzdbg << \"hello debug msg\" << std :: endl ; gzmsg << \"hello info msg\" << std :: endl ; gzwarn << \"hello warning msg\" << std :: endl ; gzerr << \"hello error msg\" << std :: endl ; // Listen to the update event. This event is broadcast every // simulation iteration. this -> updateConnection = event :: Events :: ConnectWorldUpdateBegin ( std :: bind ( & Ptz :: OnUpdate , this )); } // Called by the world update start event public : void OnUpdate () { } // Pointer to the model private : physics :: ModelPtr model ; // Pointer to the update event connection private : event :: ConnectionPtr updateConnection ; }; // Register this plugin with the simulator GZ_REGISTER_MODEL_PLUGIN ( Ptz ) }","title":"Plugin code"},{"location":"gazebo/plugins/hello_model_plugin/#world-example","text":"<?xml version=\"1.0\"?> <sdf version= \"1.4\" > <world name= \"default\" > <!-- Ground Plane --> <include> <uri> model://ground_plane </uri> </include> <include> <uri> model://sun </uri> </include> <model name= \"box\" > <pose> 0 0 0.5 0 0 0 </pose> <link name= \"link\" > <collision name= \"collision\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </visual> </link> <plugin name= \"model_push\" filename= \"libptz_plugin.so\" /> </model> </world> </sdf>","title":"world example"},{"location":"gazebo/plugins/hello_model_plugin/#usage","text":"# dont forget add plugin `so` to GAZEBO_PLUGIN_PATH gazebo --verbose world/plug_test.world # Or use -s to load plugin gazebo --verbose -s bin/libptz_plugin.so worlds/plug_teste.world","title":"usage"},{"location":"gazebo/plugins/hello_model_ros2_plugin/","text":"ROS2 Gazebo Model plugin Create simple GAZEBO plugin as a ROS2 package Simple bind between ROS and gazebo ROS WS ros_ws \u251c\u2500\u2500 install \u2502 \u251c\u2500\u2500 mulecar_sim \u2502 \u2502 \u2514\u2500\u2500 worlds \u2502 \u2514\u2500\u2500 mulecar_plugins \u2502 \u2514\u2500\u2500 lib \u2502 \u2514\u2500\u2500 libgazebo_ros_simple.so (link to build folder) \u251c\u2500\u2500 build \u251c\u2500\u2500 log \u2514\u2500\u2500 src \u251c\u2500\u2500 mulecar_plugins \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u251c\u2500\u2500 package.xml \u2502 \u251c\u2500\u2500 src \u2502 \u2502 \u2514\u2500\u2500 gazebo_ros_simple.cpp \u2502 \u2514\u2500\u2500 include \u2502 \u2514\u2500\u2500 gazebo_ros_simple.hpp \u2514\u2500\u2500 mulecar_sim \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 worlds \u2502 \u2514\u2500\u2500 gazebo_ros_simple.world \u2514\u2500\u2500 launch \u2514\u2500\u2500 gazebo_ros_simple.launch.py ROS2 pkg sudo apt install ros-foxy-gazebo-ros # cmake file to work with gazebo sudo apt install ros-foxy-gazebo-dev mulecar_plugins Simple plugin demonstration how to subscribe to topic and send string msg. pkg files - Plugin header file - Plugin cpp file - CMakeLists.txt - package.xml Header (gazebo_ros_simple.hpp) #ifndef GAZEBO_PLUGINS__GAZEBO_ROS_SIMPLE_HPP_ #define GAZEBO_PLUGINS__GAZEBO_ROS_SIMPLE_HPP_ #include <gazebo/common/Plugin.hh> #include <std_msgs/msg/string.hpp> namespace gazebo_plugins { class GazeboRosSimplePrivate ; class GazeboRosSimple : public gazebo :: ModelPlugin { public : GazeboRosSimple (); virtual ~ GazeboRosSimple (); protected : void Load ( gazebo :: physics :: ModelPtr model , sdf :: ElementPtr sdf ) override ; virtual void OnUpdate (); private : void OnRosStringMsg ( const std_msgs :: msg :: String :: ConstSharedPtr msg ); std :: unique_ptr < GazeboRosSimplePrivate > impl_ ; }; } // namespace gazebo_plugins #endif CPP #include <gazebo_ros_simple.hpp> #include <gazebo_ros/node.hpp> #include <std_msgs/msg/string.hpp> #include <rclcpp/rclcpp.hpp> #include <string> const std :: string TOPIC = \"gazebo_ros_simple\" ; namespace gazebo_plugins { class GazeboRosSimplePrivate { public : /// A pointer to the GazeboROS node. gazebo_ros :: Node :: SharedPtr ros_node_ ; // Pointer to subscriber rclcpp :: Subscription < std_msgs :: msg :: String >:: SharedPtr string_sub_ ; // Pointer to the update event connection gazebo :: event :: ConnectionPtr update_connection_ ; }; GazeboRosSimple :: GazeboRosSimple () : impl_ ( std :: make_unique < GazeboRosSimplePrivate > ()) { } GazeboRosSimple ::~ GazeboRosSimple () { } void GazeboRosSimple :: Load ( gazebo :: physics :: ModelPtr model , sdf :: ElementPtr sdf ) { impl_ -> ros_node_ = gazebo_ros :: Node :: Get ( sdf ); // Get QoS profiles const gazebo_ros :: QoS & qos = impl_ -> ros_node_ -> get_qos (); impl_ -> string_sub_ = impl_ -> ros_node_ -> create_subscription < std_msgs :: msg :: String > ( TOPIC , qos . get_subscription_qos ( \"gazebo_ros_simple\" , rclcpp :: SystemDefaultsQoS ()), std :: bind ( & GazeboRosSimple :: OnRosStringMsg , this , std :: placeholders :: _1 )); // Callback on every iteration impl_ -> update_connection_ = gazebo :: event :: Events :: ConnectWorldUpdateBegin ( std :: bind ( & GazeboRosSimple :: OnUpdate , this )); } void GazeboRosSimple :: OnRosStringMsg ( const std_msgs :: msg :: String :: ConstSharedPtr msg ) { gzmsg << \"OnRosStringMsg\" << std :: endl ; RCLCPP_INFO ( impl_ -> ros_node_ -> get_logger (), msg -> data ); } void GazeboRosSimple :: OnUpdate () { } GZ_REGISTER_MODEL_PLUGIN ( GazeboRosSimple ) } // namespace gazebo_plugins CMakeLists.txt cmake_minimum_required ( VERSION 3 .5 ) project ( mulecar_plugins ) set ( CMAKE_CXX_STANDARD 14 ) if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( -Wall -Wextra -Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( gazebo_dev REQUIRED ) find_package ( gazebo_ros REQUIRED ) find_package ( rclcpp REQUIRED ) find_package ( std_msgs REQUIRED ) # gazebo_ros_simple add_library ( gazebo_ros_simple SHARED src/gazebo_ros_simple.cpp ) target_include_directories ( gazebo_ros_simple PUBLIC include ) ament_target_dependencies ( gazebo_ros_simple \"gazebo_dev\" \"gazebo_ros\" \"std_msgs\" \"rclcpp\" ) install ( TARGETS gazebo_ros_simple ARCHIVE DESTINATION lib LIBRARY DESTINATION lib RUNTIME DESTINATION bin ) if ( BUILD_TESTING ) find_package ( ament_lint_auto REQUIRED ) ament_lint_auto_find_test_dependencies () endif () ament_package () package.xml <?xml version=\"1.0\"?> <?xml-model href=\"http://download.ros.org/schema/package_format3.xsd\" schematypens=\"http://www.w3.org/2001/XMLSchema\"?> <package format= \"3\" > <name> mulecar_plugins </name> <version> 0.0.1 </version> <description> TODO: Package description </description> <maintainer email= \"robobe2020@gmail.com\" > user </maintainer> <license> TODO: License declaration </license> <buildtool_depend> ament_cmake </buildtool_depend> <depend> std_msgs </depend> <build_depend> gazebo_dev </build_depend> <build_depend> gazebo_ros </build_depend> <build_depend> rclcpp </build_depend> <exec_depend> gazebo_dev </exec_depend> <exec_depend> gazebo_ros </exec_depend> <exec_depend> rclcpp </exec_depend> <test_depend> ament_lint_auto </test_depend> <test_depend> ament_lint_common </test_depend> <export> <build_type> ament_cmake </build_type> </export> </package> mulecar_sim World Launch world <?xml version=\"1.0\"?> <sdf version= \"1.4\" > <world name= \"default\" > <!-- Ground Plane --> <include> <uri> model://ground_plane </uri> </include> <include> <uri> model://sun </uri> </include> <model name= \"box\" > <pose> 0 0 0.5 0 0 0 </pose> <link name= \"link\" > <collision name= \"collision\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </visual> </link> <plugin name= \"simple_plug\" filename= \"libgazebo_ros_simple.so\" /> </model> </world> </sdf> Test Run gazebo List Topics Pub and test Run gazebo # from ws root folder gazebo --verbose -s install/mulecar_plugins/lib/libgazebo_ros_simple.so src/mulecar_sim/worlds/plug_test.world List Topics ros2 topic list # Result /clock /gazebo_ros_simple /parameter_events /rosout Pub and Test ros2 topic pub --once /gazebo_ros_simple std_msgs/msg/String \"{data: 'hello gazebo'}\" # Result publisher: beginning loop publishing #1: std_msgs.msg.String(data='hello gazebo') View gazebo verbose log ... [Msg] OnRosStringMsg [INFO] [1634791768.355582634] [simple_plug]: hello gazebo using launch file import os from ament_index_python.packages import get_package_share_directory , get_package_prefix from launch import LaunchDescription from launch import logging from launch.actions import ExecuteProcess world_prefix = get_package_share_directory ( \"mulecar_sim\" ) plugins = get_package_prefix ( \"mulecar_plugins\" ) world_file = os . path . join ( world_prefix , \"worlds\" , \"plug_test.world\" ) plugins_path = os . path . join ( world_prefix , \"lib\" ) log = logging . get_logger ( __name__ ) log . info ( get_package_prefix ( \"mulecar_plugins\" )) def generate_launch_description (): env = { \"GAZEBO_MODEL_PATH\" : os . environ [ \"GAZEBO_MODEL_PATH\" ], \"GAZEBO_PLUGIN_PATH\" : os . environ [ \"GAZEBO_PLUGIN_PATH\" ] + os . pathsep + plugins_path , \"GAZEBO_RESOURCE_PATH\" : os . environ [ \"GAZEBO_RESOURCE_PATH\" ], } return LaunchDescription ( [ ExecuteProcess ( cmd = [ \"gazebo\" , \"--verbose\" , \"-s\" , \"libgazebo_ros_simple.so\" , world_file ], output = \"screen\" , additional_env = env ) ] ) !!! note When launch from ROS gazebo alert [gazebo-1] [Err] [gazebo_shared.cc:46] System is attempting to load a plugin, but detected an incorrect plugin type The plugin run correctly todo: Need more research","title":"ROS2 Gazebo Model plugin"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#ros2-gazebo-model-plugin","text":"Create simple GAZEBO plugin as a ROS2 package Simple bind between ROS and gazebo","title":"ROS2 Gazebo Model plugin"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#ros-ws","text":"ros_ws \u251c\u2500\u2500 install \u2502 \u251c\u2500\u2500 mulecar_sim \u2502 \u2502 \u2514\u2500\u2500 worlds \u2502 \u2514\u2500\u2500 mulecar_plugins \u2502 \u2514\u2500\u2500 lib \u2502 \u2514\u2500\u2500 libgazebo_ros_simple.so (link to build folder) \u251c\u2500\u2500 build \u251c\u2500\u2500 log \u2514\u2500\u2500 src \u251c\u2500\u2500 mulecar_plugins \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u251c\u2500\u2500 package.xml \u2502 \u251c\u2500\u2500 src \u2502 \u2502 \u2514\u2500\u2500 gazebo_ros_simple.cpp \u2502 \u2514\u2500\u2500 include \u2502 \u2514\u2500\u2500 gazebo_ros_simple.hpp \u2514\u2500\u2500 mulecar_sim \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 worlds \u2502 \u2514\u2500\u2500 gazebo_ros_simple.world \u2514\u2500\u2500 launch \u2514\u2500\u2500 gazebo_ros_simple.launch.py","title":"ROS WS"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#ros2-pkg","text":"sudo apt install ros-foxy-gazebo-ros # cmake file to work with gazebo sudo apt install ros-foxy-gazebo-dev","title":"ROS2 pkg"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#mulecar_plugins","text":"Simple plugin demonstration how to subscribe to topic and send string msg. pkg files - Plugin header file - Plugin cpp file - CMakeLists.txt - package.xml","title":"mulecar_plugins"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#header-gazebo_ros_simplehpp","text":"#ifndef GAZEBO_PLUGINS__GAZEBO_ROS_SIMPLE_HPP_ #define GAZEBO_PLUGINS__GAZEBO_ROS_SIMPLE_HPP_ #include <gazebo/common/Plugin.hh> #include <std_msgs/msg/string.hpp> namespace gazebo_plugins { class GazeboRosSimplePrivate ; class GazeboRosSimple : public gazebo :: ModelPlugin { public : GazeboRosSimple (); virtual ~ GazeboRosSimple (); protected : void Load ( gazebo :: physics :: ModelPtr model , sdf :: ElementPtr sdf ) override ; virtual void OnUpdate (); private : void OnRosStringMsg ( const std_msgs :: msg :: String :: ConstSharedPtr msg ); std :: unique_ptr < GazeboRosSimplePrivate > impl_ ; }; } // namespace gazebo_plugins #endif","title":"Header (gazebo_ros_simple.hpp)"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#cpp","text":"#include <gazebo_ros_simple.hpp> #include <gazebo_ros/node.hpp> #include <std_msgs/msg/string.hpp> #include <rclcpp/rclcpp.hpp> #include <string> const std :: string TOPIC = \"gazebo_ros_simple\" ; namespace gazebo_plugins { class GazeboRosSimplePrivate { public : /// A pointer to the GazeboROS node. gazebo_ros :: Node :: SharedPtr ros_node_ ; // Pointer to subscriber rclcpp :: Subscription < std_msgs :: msg :: String >:: SharedPtr string_sub_ ; // Pointer to the update event connection gazebo :: event :: ConnectionPtr update_connection_ ; }; GazeboRosSimple :: GazeboRosSimple () : impl_ ( std :: make_unique < GazeboRosSimplePrivate > ()) { } GazeboRosSimple ::~ GazeboRosSimple () { } void GazeboRosSimple :: Load ( gazebo :: physics :: ModelPtr model , sdf :: ElementPtr sdf ) { impl_ -> ros_node_ = gazebo_ros :: Node :: Get ( sdf ); // Get QoS profiles const gazebo_ros :: QoS & qos = impl_ -> ros_node_ -> get_qos (); impl_ -> string_sub_ = impl_ -> ros_node_ -> create_subscription < std_msgs :: msg :: String > ( TOPIC , qos . get_subscription_qos ( \"gazebo_ros_simple\" , rclcpp :: SystemDefaultsQoS ()), std :: bind ( & GazeboRosSimple :: OnRosStringMsg , this , std :: placeholders :: _1 )); // Callback on every iteration impl_ -> update_connection_ = gazebo :: event :: Events :: ConnectWorldUpdateBegin ( std :: bind ( & GazeboRosSimple :: OnUpdate , this )); } void GazeboRosSimple :: OnRosStringMsg ( const std_msgs :: msg :: String :: ConstSharedPtr msg ) { gzmsg << \"OnRosStringMsg\" << std :: endl ; RCLCPP_INFO ( impl_ -> ros_node_ -> get_logger (), msg -> data ); } void GazeboRosSimple :: OnUpdate () { } GZ_REGISTER_MODEL_PLUGIN ( GazeboRosSimple ) } // namespace gazebo_plugins","title":"CPP"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#cmakeliststxt","text":"cmake_minimum_required ( VERSION 3 .5 ) project ( mulecar_plugins ) set ( CMAKE_CXX_STANDARD 14 ) if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( -Wall -Wextra -Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( gazebo_dev REQUIRED ) find_package ( gazebo_ros REQUIRED ) find_package ( rclcpp REQUIRED ) find_package ( std_msgs REQUIRED ) # gazebo_ros_simple add_library ( gazebo_ros_simple SHARED src/gazebo_ros_simple.cpp ) target_include_directories ( gazebo_ros_simple PUBLIC include ) ament_target_dependencies ( gazebo_ros_simple \"gazebo_dev\" \"gazebo_ros\" \"std_msgs\" \"rclcpp\" ) install ( TARGETS gazebo_ros_simple ARCHIVE DESTINATION lib LIBRARY DESTINATION lib RUNTIME DESTINATION bin ) if ( BUILD_TESTING ) find_package ( ament_lint_auto REQUIRED ) ament_lint_auto_find_test_dependencies () endif () ament_package ()","title":"CMakeLists.txt"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#packagexml","text":"<?xml version=\"1.0\"?> <?xml-model href=\"http://download.ros.org/schema/package_format3.xsd\" schematypens=\"http://www.w3.org/2001/XMLSchema\"?> <package format= \"3\" > <name> mulecar_plugins </name> <version> 0.0.1 </version> <description> TODO: Package description </description> <maintainer email= \"robobe2020@gmail.com\" > user </maintainer> <license> TODO: License declaration </license> <buildtool_depend> ament_cmake </buildtool_depend> <depend> std_msgs </depend> <build_depend> gazebo_dev </build_depend> <build_depend> gazebo_ros </build_depend> <build_depend> rclcpp </build_depend> <exec_depend> gazebo_dev </exec_depend> <exec_depend> gazebo_ros </exec_depend> <exec_depend> rclcpp </exec_depend> <test_depend> ament_lint_auto </test_depend> <test_depend> ament_lint_common </test_depend> <export> <build_type> ament_cmake </build_type> </export> </package>","title":"package.xml"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#mulecar_sim","text":"World Launch","title":"mulecar_sim"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#world","text":"<?xml version=\"1.0\"?> <sdf version= \"1.4\" > <world name= \"default\" > <!-- Ground Plane --> <include> <uri> model://ground_plane </uri> </include> <include> <uri> model://sun </uri> </include> <model name= \"box\" > <pose> 0 0 0.5 0 0 0 </pose> <link name= \"link\" > <collision name= \"collision\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </visual> </link> <plugin name= \"simple_plug\" filename= \"libgazebo_ros_simple.so\" /> </model> </world> </sdf>","title":"world"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#test","text":"Run gazebo List Topics Pub and test","title":"Test"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#run-gazebo","text":"# from ws root folder gazebo --verbose -s install/mulecar_plugins/lib/libgazebo_ros_simple.so src/mulecar_sim/worlds/plug_test.world","title":"Run gazebo"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#list-topics","text":"ros2 topic list # Result /clock /gazebo_ros_simple /parameter_events /rosout","title":"List Topics"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#pub-and-test","text":"ros2 topic pub --once /gazebo_ros_simple std_msgs/msg/String \"{data: 'hello gazebo'}\" # Result publisher: beginning loop publishing #1: std_msgs.msg.String(data='hello gazebo')","title":"Pub and Test"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#view-gazebo-verbose-log","text":"... [Msg] OnRosStringMsg [INFO] [1634791768.355582634] [simple_plug]: hello gazebo","title":"View gazebo verbose log"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#using-launch-file","text":"import os from ament_index_python.packages import get_package_share_directory , get_package_prefix from launch import LaunchDescription from launch import logging from launch.actions import ExecuteProcess world_prefix = get_package_share_directory ( \"mulecar_sim\" ) plugins = get_package_prefix ( \"mulecar_plugins\" ) world_file = os . path . join ( world_prefix , \"worlds\" , \"plug_test.world\" ) plugins_path = os . path . join ( world_prefix , \"lib\" ) log = logging . get_logger ( __name__ ) log . info ( get_package_prefix ( \"mulecar_plugins\" )) def generate_launch_description (): env = { \"GAZEBO_MODEL_PATH\" : os . environ [ \"GAZEBO_MODEL_PATH\" ], \"GAZEBO_PLUGIN_PATH\" : os . environ [ \"GAZEBO_PLUGIN_PATH\" ] + os . pathsep + plugins_path , \"GAZEBO_RESOURCE_PATH\" : os . environ [ \"GAZEBO_RESOURCE_PATH\" ], } return LaunchDescription ( [ ExecuteProcess ( cmd = [ \"gazebo\" , \"--verbose\" , \"-s\" , \"libgazebo_ros_simple.so\" , world_file ], output = \"screen\" , additional_env = env ) ] ) !!! note When launch from ROS gazebo alert [gazebo-1] [Err] [gazebo_shared.cc:46] System is attempting to load a plugin, but detected an incorrect plugin type The plugin run correctly todo: Need more research","title":"using launch file"},{"location":"resources/mkdocs/","text":"Setup mkdocs Pip mkdocs-material mkdocs-include-markdown-plugin #mkdocs #mkdocs-material-extensions Docs folder struct \u2514\u2500\u2500 docs \u251c\u2500\u2500 img \u2502 \u2514\u2500\u2500 course.png Basic mkdocs config site_name: ROS Coockbook theme: name: material nav: - Home: index.md - Launch: basics.md - Gazebo: - Spwan: wines.md - Camera: wine.md - LIDAR: tastings.md - ROS2: addresses.md - Msg: msg.md - Resources: resources.md - About: about.md markdown_extensions: - attr_list - pymdownx.caret - pymdownx.highlight - pymdownx.inlinehilite - pymdownx.tabbed: alternate_style: true - pymdownx.tasklist: custom_checkbox: true - pymdownx.snippets plugins: - include-markdown Mkdocs commands mkdocs serve mkdocs build --clean mkdocs gh-deploy Deploy to git hub In repository settings select pages Set source to branch gh-pages and folder to /root Extentions attr_list Allows to add HTML attributes and CSS classes to Markdown elements markdown_extensions: - attr_list control image width and height ![](../img/course.png){ width=200, height=50) } Code block markdown_extensions: - pymdownx.snippets usage Heightlite code markdown_extensions: - pymdownx.highlight - pymdownx.superfences usage > ```python hl_lines=\"2\" import os print(\"hightlite line\") > ``` result import os print ( \"hightlite line\" ) images ![](../img/course.png){ width=200, height=50) } Plugins mkdocs-include-markdown-plugin project readme {% include-markdown \"../README.md\" %}","title":"mkdocs"},{"location":"resources/mkdocs/#setup-mkdocs","text":"","title":"Setup mkdocs"},{"location":"resources/mkdocs/#pip","text":"mkdocs-material mkdocs-include-markdown-plugin #mkdocs #mkdocs-material-extensions","title":"Pip"},{"location":"resources/mkdocs/#docs-folder-struct","text":"\u2514\u2500\u2500 docs \u251c\u2500\u2500 img \u2502 \u2514\u2500\u2500 course.png","title":"Docs folder struct"},{"location":"resources/mkdocs/#basic-mkdocs-config","text":"site_name: ROS Coockbook theme: name: material nav: - Home: index.md - Launch: basics.md - Gazebo: - Spwan: wines.md - Camera: wine.md - LIDAR: tastings.md - ROS2: addresses.md - Msg: msg.md - Resources: resources.md - About: about.md markdown_extensions: - attr_list - pymdownx.caret - pymdownx.highlight - pymdownx.inlinehilite - pymdownx.tabbed: alternate_style: true - pymdownx.tasklist: custom_checkbox: true - pymdownx.snippets plugins: - include-markdown","title":"Basic mkdocs config"},{"location":"resources/mkdocs/#mkdocs-commands","text":"mkdocs serve mkdocs build --clean mkdocs gh-deploy","title":"Mkdocs commands"},{"location":"resources/mkdocs/#deploy-to-git-hub","text":"In repository settings select pages Set source to branch gh-pages and folder to /root","title":"Deploy to git hub"},{"location":"resources/mkdocs/#extentions","text":"","title":"Extentions"},{"location":"resources/mkdocs/#attr_list","text":"Allows to add HTML attributes and CSS classes to Markdown elements markdown_extensions: - attr_list control image width and height ![](../img/course.png){ width=200, height=50) }","title":"attr_list"},{"location":"resources/mkdocs/#code-block","text":"markdown_extensions: - pymdownx.snippets","title":"Code block"},{"location":"resources/mkdocs/#usage","text":"","title":"usage"},{"location":"resources/mkdocs/#heightlite-code","text":"markdown_extensions: - pymdownx.highlight - pymdownx.superfences","title":"Heightlite code"},{"location":"resources/mkdocs/#usage_1","text":"> ```python hl_lines=\"2\" import os print(\"hightlite line\") > ```","title":"usage"},{"location":"resources/mkdocs/#result","text":"import os print ( \"hightlite line\" )","title":"result"},{"location":"resources/mkdocs/#images","text":"![](../img/course.png){ width=200, height=50) }","title":"images"},{"location":"resources/mkdocs/#plugins","text":"","title":"Plugins"},{"location":"resources/mkdocs/#mkdocs-include-markdown-plugin","text":"project readme {% include-markdown \"../README.md\" %}","title":"mkdocs-include-markdown-plugin"},{"location":"resources/sites/","text":"Sites [RoboCup][V-RoHOW] Hands-on with ROS 2 Gazebo model plugin for ROS2 Without more info it is difficult to know where you're exactly stuck, but for me the trickiest was to get all the paths set up correctly so that everything was loaded correctly. Note for instance the model path set in the package.xml file of the description package: <export> <build_type>ament_cmake</build_type> <gazebo_ros gazebo_model_path=\"${prefix}/..\" /> </export> , which is then picked up in the launch file using GazeboRosPaths: model_path, plugin_path, media_path = GazeboRosPaths.get_paths() Most of the complexity is because ${prefix} in package.xml, get_package_share_directory in the launch file, and package:// in the URDF don't all point to the same directory under your installation, especially if you involve Rviz. See especially this commit to see some changes I had to make along the way to get it all to work: https://gitlab.com/boldhearts/ros2_bo... Hopefully this helps you in the right direction! Let us know of specific issues/error messages you're getting, so that I can then try to make this answer more specific.","title":"Sites"},{"location":"resources/sites/#sites","text":"[RoboCup][V-RoHOW] Hands-on with ROS 2 Gazebo model plugin for ROS2 Without more info it is difficult to know where you're exactly stuck, but for me the trickiest was to get all the paths set up correctly so that everything was loaded correctly. Note for instance the model path set in the package.xml file of the description package: <export> <build_type>ament_cmake</build_type> <gazebo_ros gazebo_model_path=\"${prefix}/..\" /> </export> , which is then picked up in the launch file using GazeboRosPaths: model_path, plugin_path, media_path = GazeboRosPaths.get_paths() Most of the complexity is because ${prefix} in package.xml, get_package_share_directory in the launch file, and package:// in the URDF don't all point to the same directory under your installation, especially if you involve Rviz. See especially this commit to see some changes I had to make along the way to get it all to work: https://gitlab.com/boldhearts/ros2_bo... Hopefully this helps you in the right direction! Let us know of specific issues/error messages you're getting, so that I can then try to make this answer more specific.","title":"Sites"},{"location":"ros2/launch/","text":"Launch file Python package ros2 pkg_create --build-type ament_python <pkg-name> launch file 1 2 3 4 5 6 7 8 9 from launch import LaunchDescription import launch_ros.actions def generate_launch_description (): return LaunchDescription ([ launch_ros . actions . Node ( package = 'mulecar' , executable = 'pub' , output = 'screen' )]) setup.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 from setuptools import setup from glob import glob import os package_name = 'mulecar' setup ( name = package_name , version = '0.0.0' , packages = [ package_name ], data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( os . path . join ( 'share' , package_name ), [ 'package.xml' ]), ( os . path . join ( 'share' , package_name ), glob ( 'launch/*.launch.py' )), ], install_requires = [ 'setuptools' ], zip_safe = True , maintainer = 'user' , maintainer_email = 'robobe2020@gmail.com' , entry_points = { 'console_scripts' : [ 'pub = mulecar.publisher:main' ], }, ) (line 14) Copy launch files to install folder (line 22) Node entry point call by the launch file launch_ros.actions.Node method argument executable Build and Run colcon build --symlink-install --packages-select <pkg_name> source install/setup.bash ros2 launch <pkg_name> <launc_file>.launch.py Resources Launching/monitoring multiple nodes with Launch","title":"Launch"},{"location":"ros2/launch/#launch-file","text":"","title":"Launch file"},{"location":"ros2/launch/#python-package","text":"ros2 pkg_create --build-type ament_python <pkg-name>","title":"Python package"},{"location":"ros2/launch/#launch-file_1","text":"1 2 3 4 5 6 7 8 9 from launch import LaunchDescription import launch_ros.actions def generate_launch_description (): return LaunchDescription ([ launch_ros . actions . Node ( package = 'mulecar' , executable = 'pub' , output = 'screen' )])","title":"launch file"},{"location":"ros2/launch/#setuppy","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 from setuptools import setup from glob import glob import os package_name = 'mulecar' setup ( name = package_name , version = '0.0.0' , packages = [ package_name ], data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( os . path . join ( 'share' , package_name ), [ 'package.xml' ]), ( os . path . join ( 'share' , package_name ), glob ( 'launch/*.launch.py' )), ], install_requires = [ 'setuptools' ], zip_safe = True , maintainer = 'user' , maintainer_email = 'robobe2020@gmail.com' , entry_points = { 'console_scripts' : [ 'pub = mulecar.publisher:main' ], }, ) (line 14) Copy launch files to install folder (line 22) Node entry point call by the launch file launch_ros.actions.Node method argument executable","title":"setup.py"},{"location":"ros2/launch/#build-and-run","text":"colcon build --symlink-install --packages-select <pkg_name> source install/setup.bash ros2 launch <pkg_name> <launc_file>.launch.py","title":"Build and Run"},{"location":"ros2/launch/#resources","text":"Launching/monitoring multiple nodes with Launch","title":"Resources"},{"location":"ros2/gazebo/launch/","text":"ROS2 Gazebo simple demo Create package for simulation Create package for project plugins Launch gazebo world that include project model project plugin # simulation package ros2 pkg create --build-type ament_cmake mulecar_sim #plugins package ros2 pkg create --build-type ament_cmake mulecar_plugins \u251c\u2500\u2500 launch \u251c\u2500\u2500 models \u251c\u2500\u2500 worlds \u251c\u2500\u2500 CMakeLists.txt \u2514\u2500\u2500 package.xml","title":"ROS2 Gazebo simple demo"},{"location":"ros2/gazebo/launch/#ros2-gazebo-simple-demo","text":"Create package for simulation Create package for project plugins Launch gazebo world that include project model project plugin # simulation package ros2 pkg create --build-type ament_cmake mulecar_sim #plugins package ros2 pkg create --build-type ament_cmake mulecar_plugins \u251c\u2500\u2500 launch \u251c\u2500\u2500 models \u251c\u2500\u2500 worlds \u251c\u2500\u2500 CMakeLists.txt \u2514\u2500\u2500 package.xml","title":"ROS2 Gazebo simple demo"},{"location":"ros2/gazebo/plugin/","text":"Plugin sudo apt install ros-foxy-gazebo-ros-pkgs","title":"Plugin"},{"location":"ros2/gazebo/plugin/#plugin","text":"sudo apt install ros-foxy-gazebo-ros-pkgs","title":"Plugin"}]}